// This file was automatically generated by VS extension Windows Machine Learning Code Generator v3
// from model file model_float32_lightning.onnx
// Warning: This file may get overwritten if you add add an onnx file with the same name
using System;
using System.Threading.Tasks;
using Windows.Storage.Streams;
using Microsoft.AI.MachineLearning;
namespace WinML_MoveNet
{
    // https://tfhub.dev/google/movenet/singlepose/lightning/3
    // https://www.tensorflow.org/hub/tutorials/movenet
    public sealed class model_float32_lightningInput
    {
        // https://www.tensorflow.org/hub/tutorials/movenet
        // input is height, width, channel, values 0...255
        public TensorFloat input00; // shape(1,192,192,3) 
    }
    
    public sealed class model_float32_lightningOutput
    {
        // The first two channels of the last dimension represents the yx coordinates(normalized to image frame, i.e.range in [0.0, 1.0]) of the 17 keypoints(in the order of: [nose, left eye, right eye, left ear, right ear, left shoulder, right shoulder, left elbow, right elbow, left wrist, right wrist, left hip, right hip, left knee, right knee, left ankle, right ankle]).
        // The third channel of the last dimension represents the prediction confidence scores of each keypoint, also in the range[0.0, 1.0].
        // https://tfhub.dev/google/lite-model/movenet/singlepose/lightning/3
        public TensorFloat Identity; // shape(1,1,17,3)
    }
    
    public sealed class model_float32_lightningModel
    {
        private LearningModel model;
        private LearningModelSession session;
        private LearningModelBinding binding;
        public static async Task<model_float32_lightningModel> CreateFromStreamAsync(IRandomAccessStreamReference stream)
        {
            model_float32_lightningModel learningModel = new model_float32_lightningModel();
            learningModel.model = await LearningModel.LoadFromStreamAsync(stream);
            learningModel.session = new LearningModelSession(learningModel.model);
            learningModel.binding = new LearningModelBinding(learningModel.session);
            return learningModel;
        }
        public async Task<model_float32_lightningOutput> EvaluateAsync(model_float32_lightningInput input)
        {
            binding.Bind("input:0", input.input00);
            var result = await session.EvaluateAsync(binding, "0");
            var output = new model_float32_lightningOutput();
            output.Identity = result.Outputs["Identity"] as TensorFloat;
            return output;
        }
    }
}

